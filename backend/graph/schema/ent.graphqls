directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateMatchInput is used for create Match object.
Input was generated by ent.
"""
input CreateMatchInput {
  title: String!
  date: Time!
  location: String!
  level: MatchLevel!
  participants: Int!
  fee: Int!
  notes: String!
  createdAt: Time
  updatedAt: Time
  isApplied: Boolean
  creatorID: ID!
  matchParticipationIDs: [ID!]
}
"""
CreateParticipationInput is used for create Participation object.
Input was generated by ent.
"""
input CreateParticipationInput {
  status: ParticipationStatus
  createdAt: Time
  updatedAt: Time
  userID: ID!
  matchID: ID!
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  nickname: String!
  email: String!
  passwordHash: String!
  introduction: String!
  createdAt: Time
  updatedAt: Time
  matchIDs: [ID!]
  userParticipationIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Match implements Node {
  id: ID!
  title: String!
  date: Time!
  location: String!
  level: MatchLevel!
  participants: Int!
  fee: Int!
  notes: String!
  creatorID: ID!
  createdAt: Time!
  updatedAt: Time!
  isApplied: Boolean!
  creator: User!
  matchParticipation: [Participation!]
}
"""
MatchLevel is enum for the field level
"""
enum MatchLevel @goModel(model: "github.com/horiyuko0512/soccer-community/ent/match.Level") {
  beginner
  intermediate
  advanced
}
"""
MatchWhereInput is used for filtering Match objects.
Input was generated by ent.
"""
input MatchWhereInput {
  not: MatchWhereInput
  and: [MatchWhereInput!]
  or: [MatchWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  date field predicates
  """
  date: Time
  dateNEQ: Time
  dateIn: [Time!]
  dateNotIn: [Time!]
  dateGT: Time
  dateGTE: Time
  dateLT: Time
  dateLTE: Time
  """
  location field predicates
  """
  location: String
  locationNEQ: String
  locationIn: [String!]
  locationNotIn: [String!]
  locationGT: String
  locationGTE: String
  locationLT: String
  locationLTE: String
  locationContains: String
  locationHasPrefix: String
  locationHasSuffix: String
  locationEqualFold: String
  locationContainsFold: String
  """
  level field predicates
  """
  level: MatchLevel
  levelNEQ: MatchLevel
  levelIn: [MatchLevel!]
  levelNotIn: [MatchLevel!]
  """
  participants field predicates
  """
  participants: Int
  participantsNEQ: Int
  participantsIn: [Int!]
  participantsNotIn: [Int!]
  participantsGT: Int
  participantsGTE: Int
  participantsLT: Int
  participantsLTE: Int
  """
  fee field predicates
  """
  fee: Int
  feeNEQ: Int
  feeIn: [Int!]
  feeNotIn: [Int!]
  feeGT: Int
  feeGTE: Int
  feeLT: Int
  feeLTE: Int
  """
  notes field predicates
  """
  notes: String
  notesNEQ: String
  notesIn: [String!]
  notesNotIn: [String!]
  notesGT: String
  notesGTE: String
  notesLT: String
  notesLTE: String
  notesContains: String
  notesHasPrefix: String
  notesHasSuffix: String
  notesEqualFold: String
  notesContainsFold: String
  """
  creator_id field predicates
  """
  creatorID: ID
  creatorIDNEQ: ID
  creatorIDIn: [ID!]
  creatorIDNotIn: [ID!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  is_applied field predicates
  """
  isApplied: Boolean
  isAppliedNEQ: Boolean
  """
  creator edge predicates
  """
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
  """
  match_participation edge predicates
  """
  hasMatchParticipation: Boolean
  hasMatchParticipationWith: [ParticipationWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/horiyuko0512/soccer-community/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Participation implements Node {
  id: ID!
  userID: ID!
  matchID: ID!
  status: ParticipationStatus!
  createdAt: Time!
  updatedAt: Time!
  user: User!
  match: Match!
}
"""
ParticipationStatus is enum for the field status
"""
enum ParticipationStatus @goModel(model: "github.com/horiyuko0512/soccer-community/ent/participation.Status") {
  pending
  approved
  rejected
  cancelled
}
"""
ParticipationWhereInput is used for filtering Participation objects.
Input was generated by ent.
"""
input ParticipationWhereInput {
  not: ParticipationWhereInput
  and: [ParticipationWhereInput!]
  or: [ParticipationWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  user_id field predicates
  """
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  """
  match_id field predicates
  """
  matchID: ID
  matchIDNEQ: ID
  matchIDIn: [ID!]
  matchIDNotIn: [ID!]
  """
  status field predicates
  """
  status: ParticipationStatus
  statusNEQ: ParticipationStatus
  statusIn: [ParticipationStatus!]
  statusNotIn: [ParticipationStatus!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  match edge predicates
  """
  hasMatch: Boolean
  hasMatchWith: [MatchWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  matche(id: ID!): Match!
  matches: [Match!]!
  participation(id: ID!): Participation!
  participations: [Participation!]!
  user(id: ID!): User!
  users: [User!]!
}
type Mutation {
  createMatch(input: CreateMatchInput!): Match!
  updateMatch(id: ID!, input: UpdateMatchInput!): Match!
  createParticipation(input: CreateParticipationInput!): Participation!
  updateParticipation(id: ID!, input: UpdateParticipationInput!): Participation!
  createUser(input: CreateUserInput!): User!
  updateUser(input: UpdateUserInput!): User!
}
"""
The builtin Time type
"""
scalar Time
"""
UpdateMatchInput is used for update Match object.
Input was generated by ent.
"""
input UpdateMatchInput {
  title: String
  date: Time
  location: String
  level: MatchLevel
  participants: Int
  fee: Int
  notes: String
  updatedAt: Time
  isApplied: Boolean
  creatorID: ID
  addMatchParticipationIDs: [ID!]
  removeMatchParticipationIDs: [ID!]
  clearMatchParticipation: Boolean
}
"""
UpdateParticipationInput is used for update Participation object.
Input was generated by ent.
"""
input UpdateParticipationInput {
  status: ParticipationStatus
  updatedAt: Time
  userID: ID
  matchID: ID
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  nickname: String
  email: String
  passwordHash: String
  introduction: String
  updatedAt: Time
  addMatchIDs: [ID!]
  removeMatchIDs: [ID!]
  clearMatches: Boolean
  addUserParticipationIDs: [ID!]
  removeUserParticipationIDs: [ID!]
  clearUserParticipation: Boolean
}
type User implements Node {
  id: ID!
  nickname: String! @goField(name: "NickName", forceResolver: false)
  email: String!
  passwordHash: String!
  introduction: String!
  createdAt: Time!
  updatedAt: Time!
  matches: [Match!]
  userParticipation: [Participation!]
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  nickName field predicates
  """
  nickname: String
  nicknameNEQ: String
  nicknameIn: [String!]
  nicknameNotIn: [String!]
  nicknameGT: String
  nicknameGTE: String
  nicknameLT: String
  nicknameLTE: String
  nicknameContains: String
  nicknameHasPrefix: String
  nicknameHasSuffix: String
  nicknameEqualFold: String
  nicknameContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  password_hash field predicates
  """
  passwordHash: String
  passwordHashNEQ: String
  passwordHashIn: [String!]
  passwordHashNotIn: [String!]
  passwordHashGT: String
  passwordHashGTE: String
  passwordHashLT: String
  passwordHashLTE: String
  passwordHashContains: String
  passwordHashHasPrefix: String
  passwordHashHasSuffix: String
  passwordHashEqualFold: String
  passwordHashContainsFold: String
  """
  introduction field predicates
  """
  introduction: String
  introductionNEQ: String
  introductionIn: [String!]
  introductionNotIn: [String!]
  introductionGT: String
  introductionGTE: String
  introductionLT: String
  introductionLTE: String
  introductionContains: String
  introductionHasPrefix: String
  introductionHasSuffix: String
  introductionEqualFold: String
  introductionContainsFold: String
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  matches edge predicates
  """
  hasMatches: Boolean
  hasMatchesWith: [MatchWhereInput!]
  """
  user_participation edge predicates
  """
  hasUserParticipation: Boolean
  hasUserParticipationWith: [ParticipationWhereInput!]
}
