// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/horiyuko0512/soccer-community/ent/match"
	"github.com/horiyuko0512/soccer-community/ent/participation"
	"github.com/horiyuko0512/soccer-community/ent/user"
)

// MatchCreate is the builder for creating a Match entity.
type MatchCreate struct {
	config
	mutation *MatchMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (mc *MatchCreate) SetTitle(s string) *MatchCreate {
	mc.mutation.SetTitle(s)
	return mc
}

// SetStartAt sets the "start_at" field.
func (mc *MatchCreate) SetStartAt(t time.Time) *MatchCreate {
	mc.mutation.SetStartAt(t)
	return mc
}

// SetEndAt sets the "end_at" field.
func (mc *MatchCreate) SetEndAt(t time.Time) *MatchCreate {
	mc.mutation.SetEndAt(t)
	return mc
}

// SetLocation sets the "location" field.
func (mc *MatchCreate) SetLocation(s string) *MatchCreate {
	mc.mutation.SetLocation(s)
	return mc
}

// SetLevel sets the "level" field.
func (mc *MatchCreate) SetLevel(m match.Level) *MatchCreate {
	mc.mutation.SetLevel(m)
	return mc
}

// SetParticipants sets the "participants" field.
func (mc *MatchCreate) SetParticipants(i int) *MatchCreate {
	mc.mutation.SetParticipants(i)
	return mc
}

// SetFee sets the "fee" field.
func (mc *MatchCreate) SetFee(i int) *MatchCreate {
	mc.mutation.SetFee(i)
	return mc
}

// SetNotes sets the "notes" field.
func (mc *MatchCreate) SetNotes(s string) *MatchCreate {
	mc.mutation.SetNotes(s)
	return mc
}

// SetCreatorID sets the "creator_id" field.
func (mc *MatchCreate) SetCreatorID(u uuid.UUID) *MatchCreate {
	mc.mutation.SetCreatorID(u)
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MatchCreate) SetCreatedAt(t time.Time) *MatchCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MatchCreate) SetNillableCreatedAt(t *time.Time) *MatchCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MatchCreate) SetUpdatedAt(t time.Time) *MatchCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MatchCreate) SetNillableUpdatedAt(t *time.Time) *MatchCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetIsApplied sets the "is_applied" field.
func (mc *MatchCreate) SetIsApplied(b bool) *MatchCreate {
	mc.mutation.SetIsApplied(b)
	return mc
}

// SetNillableIsApplied sets the "is_applied" field if the given value is not nil.
func (mc *MatchCreate) SetNillableIsApplied(b *bool) *MatchCreate {
	if b != nil {
		mc.SetIsApplied(*b)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MatchCreate) SetID(u uuid.UUID) *MatchCreate {
	mc.mutation.SetID(u)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *MatchCreate) SetNillableID(u *uuid.UUID) *MatchCreate {
	if u != nil {
		mc.SetID(*u)
	}
	return mc
}

// SetCreator sets the "creator" edge to the User entity.
func (mc *MatchCreate) SetCreator(u *User) *MatchCreate {
	return mc.SetCreatorID(u.ID)
}

// AddMatchParticipationIDs adds the "match_participation" edge to the Participation entity by IDs.
func (mc *MatchCreate) AddMatchParticipationIDs(ids ...uuid.UUID) *MatchCreate {
	mc.mutation.AddMatchParticipationIDs(ids...)
	return mc
}

// AddMatchParticipation adds the "match_participation" edges to the Participation entity.
func (mc *MatchCreate) AddMatchParticipation(p ...*Participation) *MatchCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mc.AddMatchParticipationIDs(ids...)
}

// Mutation returns the MatchMutation object of the builder.
func (mc *MatchCreate) Mutation() *MatchMutation {
	return mc.mutation
}

// Save creates the Match in the database.
func (mc *MatchCreate) Save(ctx context.Context) (*Match, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MatchCreate) SaveX(ctx context.Context) *Match {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MatchCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MatchCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MatchCreate) defaults() {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := match.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := match.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.IsApplied(); !ok {
		v := match.DefaultIsApplied
		mc.mutation.SetIsApplied(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		v := match.DefaultID()
		mc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MatchCreate) check() error {
	if _, ok := mc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Match.title"`)}
	}
	if v, ok := mc.mutation.Title(); ok {
		if err := match.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Match.title": %w`, err)}
		}
	}
	if _, ok := mc.mutation.StartAt(); !ok {
		return &ValidationError{Name: "start_at", err: errors.New(`ent: missing required field "Match.start_at"`)}
	}
	if _, ok := mc.mutation.EndAt(); !ok {
		return &ValidationError{Name: "end_at", err: errors.New(`ent: missing required field "Match.end_at"`)}
	}
	if _, ok := mc.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "Match.location"`)}
	}
	if v, ok := mc.mutation.Location(); ok {
		if err := match.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Match.location": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "Match.level"`)}
	}
	if v, ok := mc.mutation.Level(); ok {
		if err := match.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "Match.level": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Participants(); !ok {
		return &ValidationError{Name: "participants", err: errors.New(`ent: missing required field "Match.participants"`)}
	}
	if v, ok := mc.mutation.Participants(); ok {
		if err := match.ParticipantsValidator(v); err != nil {
			return &ValidationError{Name: "participants", err: fmt.Errorf(`ent: validator failed for field "Match.participants": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Fee(); !ok {
		return &ValidationError{Name: "fee", err: errors.New(`ent: missing required field "Match.fee"`)}
	}
	if v, ok := mc.mutation.Fee(); ok {
		if err := match.FeeValidator(v); err != nil {
			return &ValidationError{Name: "fee", err: fmt.Errorf(`ent: validator failed for field "Match.fee": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Notes(); !ok {
		return &ValidationError{Name: "notes", err: errors.New(`ent: missing required field "Match.notes"`)}
	}
	if v, ok := mc.mutation.Notes(); ok {
		if err := match.NotesValidator(v); err != nil {
			return &ValidationError{Name: "notes", err: fmt.Errorf(`ent: validator failed for field "Match.notes": %w`, err)}
		}
	}
	if _, ok := mc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator_id", err: errors.New(`ent: missing required field "Match.creator_id"`)}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Match.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Match.updated_at"`)}
	}
	if _, ok := mc.mutation.IsApplied(); !ok {
		return &ValidationError{Name: "is_applied", err: errors.New(`ent: missing required field "Match.is_applied"`)}
	}
	if len(mc.mutation.CreatorIDs()) == 0 {
		return &ValidationError{Name: "creator", err: errors.New(`ent: missing required edge "Match.creator"`)}
	}
	return nil
}

func (mc *MatchCreate) sqlSave(ctx context.Context) (*Match, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MatchCreate) createSpec() (*Match, *sqlgraph.CreateSpec) {
	var (
		_node = &Match{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(match.Table, sqlgraph.NewFieldSpec(match.FieldID, field.TypeUUID))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mc.mutation.Title(); ok {
		_spec.SetField(match.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := mc.mutation.StartAt(); ok {
		_spec.SetField(match.FieldStartAt, field.TypeTime, value)
		_node.StartAt = value
	}
	if value, ok := mc.mutation.EndAt(); ok {
		_spec.SetField(match.FieldEndAt, field.TypeTime, value)
		_node.EndAt = value
	}
	if value, ok := mc.mutation.Location(); ok {
		_spec.SetField(match.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := mc.mutation.Level(); ok {
		_spec.SetField(match.FieldLevel, field.TypeEnum, value)
		_node.Level = value
	}
	if value, ok := mc.mutation.Participants(); ok {
		_spec.SetField(match.FieldParticipants, field.TypeInt, value)
		_node.Participants = value
	}
	if value, ok := mc.mutation.Fee(); ok {
		_spec.SetField(match.FieldFee, field.TypeInt, value)
		_node.Fee = value
	}
	if value, ok := mc.mutation.Notes(); ok {
		_spec.SetField(match.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(match.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(match.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.IsApplied(); ok {
		_spec.SetField(match.FieldIsApplied, field.TypeBool, value)
		_node.IsApplied = value
	}
	if nodes := mc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.CreatorTable,
			Columns: []string{match.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MatchParticipationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.MatchParticipationTable,
			Columns: []string{match.MatchParticipationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(participation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MatchCreateBulk is the builder for creating many Match entities in bulk.
type MatchCreateBulk struct {
	config
	err      error
	builders []*MatchCreate
}

// Save creates the Match entities in the database.
func (mcb *MatchCreateBulk) Save(ctx context.Context) ([]*Match, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Match, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MatchMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MatchCreateBulk) SaveX(ctx context.Context) []*Match {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MatchCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MatchCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
