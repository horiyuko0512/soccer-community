// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// MatchesColumns holds the columns for the "matches" table.
	MatchesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "title", Type: field.TypeString, Size: 50},
		{Name: "start_at", Type: field.TypeTime},
		{Name: "end_at", Type: field.TypeTime},
		{Name: "location", Type: field.TypeString},
		{Name: "level", Type: field.TypeEnum, Enums: []string{"beginner", "intermediate", "advanced"}},
		{Name: "participants", Type: field.TypeInt},
		{Name: "fee", Type: field.TypeInt},
		{Name: "notes", Type: field.TypeString, Size: 500},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "is_applied", Type: field.TypeBool, Default: true},
		{Name: "creator_id", Type: field.TypeUUID},
	}
	// MatchesTable holds the schema information for the "matches" table.
	MatchesTable = &schema.Table{
		Name:       "matches",
		Columns:    MatchesColumns,
		PrimaryKey: []*schema.Column{MatchesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "matches_users_matches",
				Columns:    []*schema.Column{MatchesColumns[12]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "match_id_creator_id",
				Unique:  true,
				Columns: []*schema.Column{MatchesColumns[0], MatchesColumns[12]},
			},
			{
				Name:    "match_start_at",
				Unique:  false,
				Columns: []*schema.Column{MatchesColumns[2]},
			},
			{
				Name:    "match_end_at",
				Unique:  false,
				Columns: []*schema.Column{MatchesColumns[3]},
			},
			{
				Name:    "match_location",
				Unique:  false,
				Columns: []*schema.Column{MatchesColumns[4]},
			},
			{
				Name:    "match_level",
				Unique:  false,
				Columns: []*schema.Column{MatchesColumns[5]},
			},
		},
	}
	// ParticipationsColumns holds the columns for the "participations" table.
	ParticipationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "approved", "rejected", "cancelled"}, Default: "pending"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "match_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// ParticipationsTable holds the schema information for the "participations" table.
	ParticipationsTable = &schema.Table{
		Name:       "participations",
		Columns:    ParticipationsColumns,
		PrimaryKey: []*schema.Column{ParticipationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "participations_matches_match_participation",
				Columns:    []*schema.Column{ParticipationsColumns[4]},
				RefColumns: []*schema.Column{MatchesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "participations_users_user_participation",
				Columns:    []*schema.Column{ParticipationsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "participation_user_id_match_id",
				Unique:  true,
				Columns: []*schema.Column{ParticipationsColumns[5], ParticipationsColumns[4]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "nick_name", Type: field.TypeString, Size: 20},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password_hash", Type: field.TypeString},
		{Name: "introduction", Type: field.TypeString, Size: 500},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_id_email",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[0], UsersColumns[2]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		MatchesTable,
		ParticipationsTable,
		UsersTable,
	}
)

func init() {
	MatchesTable.ForeignKeys[0].RefTable = UsersTable
	ParticipationsTable.ForeignKeys[0].RefTable = MatchesTable
	ParticipationsTable.ForeignKeys[1].RefTable = UsersTable
}
