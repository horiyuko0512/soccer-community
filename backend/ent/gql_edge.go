// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (m *Match) Creator(ctx context.Context) (*User, error) {
	result, err := m.Edges.CreatorOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryCreator().Only(ctx)
	}
	return result, err
}

func (m *Match) MatchParticipation(ctx context.Context) (result []*Participation, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = m.NamedMatchParticipation(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = m.Edges.MatchParticipationOrErr()
	}
	if IsNotLoaded(err) {
		result, err = m.QueryMatchParticipation().All(ctx)
	}
	return result, err
}

func (pa *Participation) User(ctx context.Context) (*User, error) {
	result, err := pa.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = pa.QueryUser().Only(ctx)
	}
	return result, err
}

func (pa *Participation) Match(ctx context.Context) (*Match, error) {
	result, err := pa.Edges.MatchOrErr()
	if IsNotLoaded(err) {
		result, err = pa.QueryMatch().Only(ctx)
	}
	return result, err
}

func (u *User) Matches(ctx context.Context) (result []*Match, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedMatches(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.MatchesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryMatches().All(ctx)
	}
	return result, err
}

func (u *User) UserParticipation(ctx context.Context) (result []*Participation, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedUserParticipation(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.UserParticipationOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryUserParticipation().All(ctx)
	}
	return result, err
}
