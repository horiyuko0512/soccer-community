// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/horiyuko0512/soccer-community/ent/match"
	"github.com/horiyuko0512/soccer-community/ent/participation"
	"github.com/horiyuko0512/soccer-community/ent/user"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (m *MatchQuery) CollectFields(ctx context.Context, satisfies ...string) (*MatchQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return m, nil
	}
	if err := m.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return m, nil
}

func (m *MatchQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(match.Columns))
		selectedFields = []string{match.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "creator":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: m.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			m.withCreator = query
			if _, ok := fieldSeen[match.FieldCreatorID]; !ok {
				selectedFields = append(selectedFields, match.FieldCreatorID)
				fieldSeen[match.FieldCreatorID] = struct{}{}
			}

		case "matchParticipation":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ParticipationClient{config: m.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, participationImplementors)...); err != nil {
				return err
			}
			m.WithNamedMatchParticipation(alias, func(wq *ParticipationQuery) {
				*wq = *query
			})
		case "title":
			if _, ok := fieldSeen[match.FieldTitle]; !ok {
				selectedFields = append(selectedFields, match.FieldTitle)
				fieldSeen[match.FieldTitle] = struct{}{}
			}
		case "startAt":
			if _, ok := fieldSeen[match.FieldStartAt]; !ok {
				selectedFields = append(selectedFields, match.FieldStartAt)
				fieldSeen[match.FieldStartAt] = struct{}{}
			}
		case "endAt":
			if _, ok := fieldSeen[match.FieldEndAt]; !ok {
				selectedFields = append(selectedFields, match.FieldEndAt)
				fieldSeen[match.FieldEndAt] = struct{}{}
			}
		case "location":
			if _, ok := fieldSeen[match.FieldLocation]; !ok {
				selectedFields = append(selectedFields, match.FieldLocation)
				fieldSeen[match.FieldLocation] = struct{}{}
			}
		case "level":
			if _, ok := fieldSeen[match.FieldLevel]; !ok {
				selectedFields = append(selectedFields, match.FieldLevel)
				fieldSeen[match.FieldLevel] = struct{}{}
			}
		case "participants":
			if _, ok := fieldSeen[match.FieldParticipants]; !ok {
				selectedFields = append(selectedFields, match.FieldParticipants)
				fieldSeen[match.FieldParticipants] = struct{}{}
			}
		case "fee":
			if _, ok := fieldSeen[match.FieldFee]; !ok {
				selectedFields = append(selectedFields, match.FieldFee)
				fieldSeen[match.FieldFee] = struct{}{}
			}
		case "notes":
			if _, ok := fieldSeen[match.FieldNotes]; !ok {
				selectedFields = append(selectedFields, match.FieldNotes)
				fieldSeen[match.FieldNotes] = struct{}{}
			}
		case "creatorID":
			if _, ok := fieldSeen[match.FieldCreatorID]; !ok {
				selectedFields = append(selectedFields, match.FieldCreatorID)
				fieldSeen[match.FieldCreatorID] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[match.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, match.FieldCreatedAt)
				fieldSeen[match.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[match.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, match.FieldUpdatedAt)
				fieldSeen[match.FieldUpdatedAt] = struct{}{}
			}
		case "isApplied":
			if _, ok := fieldSeen[match.FieldIsApplied]; !ok {
				selectedFields = append(selectedFields, match.FieldIsApplied)
				fieldSeen[match.FieldIsApplied] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		m.Select(selectedFields...)
	}
	return nil
}

type matchPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []MatchPaginateOption
}

func newMatchPaginateArgs(rv map[string]any) *matchPaginateArgs {
	args := &matchPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*MatchWhereInput); ok {
		args.opts = append(args.opts, WithMatchFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pa *ParticipationQuery) CollectFields(ctx context.Context, satisfies ...string) (*ParticipationQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pa, nil
	}
	if err := pa.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pa, nil
}

func (pa *ParticipationQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(participation.Columns))
		selectedFields = []string{participation.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: pa.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			pa.withUser = query
			if _, ok := fieldSeen[participation.FieldUserID]; !ok {
				selectedFields = append(selectedFields, participation.FieldUserID)
				fieldSeen[participation.FieldUserID] = struct{}{}
			}

		case "match":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&MatchClient{config: pa.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, matchImplementors)...); err != nil {
				return err
			}
			pa.withMatch = query
			if _, ok := fieldSeen[participation.FieldMatchID]; !ok {
				selectedFields = append(selectedFields, participation.FieldMatchID)
				fieldSeen[participation.FieldMatchID] = struct{}{}
			}
		case "userID":
			if _, ok := fieldSeen[participation.FieldUserID]; !ok {
				selectedFields = append(selectedFields, participation.FieldUserID)
				fieldSeen[participation.FieldUserID] = struct{}{}
			}
		case "matchID":
			if _, ok := fieldSeen[participation.FieldMatchID]; !ok {
				selectedFields = append(selectedFields, participation.FieldMatchID)
				fieldSeen[participation.FieldMatchID] = struct{}{}
			}
		case "status":
			if _, ok := fieldSeen[participation.FieldStatus]; !ok {
				selectedFields = append(selectedFields, participation.FieldStatus)
				fieldSeen[participation.FieldStatus] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[participation.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, participation.FieldCreatedAt)
				fieldSeen[participation.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[participation.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, participation.FieldUpdatedAt)
				fieldSeen[participation.FieldUpdatedAt] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		pa.Select(selectedFields...)
	}
	return nil
}

type participationPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ParticipationPaginateOption
}

func newParticipationPaginateArgs(rv map[string]any) *participationPaginateArgs {
	args := &participationPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*ParticipationWhereInput); ok {
		args.opts = append(args.opts, WithParticipationFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return u, nil
	}
	if err := u.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return u, nil
}

func (u *UserQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(user.Columns))
		selectedFields = []string{user.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "matches":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&MatchClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, matchImplementors)...); err != nil {
				return err
			}
			u.WithNamedMatches(alias, func(wq *MatchQuery) {
				*wq = *query
			})

		case "userParticipation":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ParticipationClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, participationImplementors)...); err != nil {
				return err
			}
			u.WithNamedUserParticipation(alias, func(wq *ParticipationQuery) {
				*wq = *query
			})
		case "nickname":
			if _, ok := fieldSeen[user.FieldNickName]; !ok {
				selectedFields = append(selectedFields, user.FieldNickName)
				fieldSeen[user.FieldNickName] = struct{}{}
			}
		case "email":
			if _, ok := fieldSeen[user.FieldEmail]; !ok {
				selectedFields = append(selectedFields, user.FieldEmail)
				fieldSeen[user.FieldEmail] = struct{}{}
			}
		case "passwordHash":
			if _, ok := fieldSeen[user.FieldPasswordHash]; !ok {
				selectedFields = append(selectedFields, user.FieldPasswordHash)
				fieldSeen[user.FieldPasswordHash] = struct{}{}
			}
		case "introduction":
			if _, ok := fieldSeen[user.FieldIntroduction]; !ok {
				selectedFields = append(selectedFields, user.FieldIntroduction)
				fieldSeen[user.FieldIntroduction] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[user.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, user.FieldCreatedAt)
				fieldSeen[user.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[user.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, user.FieldUpdatedAt)
				fieldSeen[user.FieldUpdatedAt] = struct{}{}
			}
		case "refreshToken":
			if _, ok := fieldSeen[user.FieldRefreshToken]; !ok {
				selectedFields = append(selectedFields, user.FieldRefreshToken)
				fieldSeen[user.FieldRefreshToken] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		u.Select(selectedFields...)
	}
	return nil
}

type userPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserPaginateOption
}

func newUserPaginateArgs(rv map[string]any) *userPaginateArgs {
	args := &userPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*UserWhereInput); ok {
		args.opts = append(args.opts, WithUserFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

// mayAddCondition appends another type condition to the satisfies list
// if it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond []string) []string {
Cond:
	for _, c := range typeCond {
		for _, s := range satisfies {
			if c == s {
				continue Cond
			}
		}
		satisfies = append(satisfies, c)
	}
	return satisfies
}
