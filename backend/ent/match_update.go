// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/horiyuko0512/soccer-community/ent/match"
	"github.com/horiyuko0512/soccer-community/ent/participation"
	"github.com/horiyuko0512/soccer-community/ent/predicate"
	"github.com/horiyuko0512/soccer-community/ent/user"
)

// MatchUpdate is the builder for updating Match entities.
type MatchUpdate struct {
	config
	hooks    []Hook
	mutation *MatchMutation
}

// Where appends a list predicates to the MatchUpdate builder.
func (mu *MatchUpdate) Where(ps ...predicate.Match) *MatchUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetTitle sets the "title" field.
func (mu *MatchUpdate) SetTitle(s string) *MatchUpdate {
	mu.mutation.SetTitle(s)
	return mu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableTitle(s *string) *MatchUpdate {
	if s != nil {
		mu.SetTitle(*s)
	}
	return mu
}

// SetDate sets the "date" field.
func (mu *MatchUpdate) SetDate(t time.Time) *MatchUpdate {
	mu.mutation.SetDate(t)
	return mu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableDate(t *time.Time) *MatchUpdate {
	if t != nil {
		mu.SetDate(*t)
	}
	return mu
}

// SetLocation sets the "location" field.
func (mu *MatchUpdate) SetLocation(s string) *MatchUpdate {
	mu.mutation.SetLocation(s)
	return mu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableLocation(s *string) *MatchUpdate {
	if s != nil {
		mu.SetLocation(*s)
	}
	return mu
}

// SetLevel sets the "level" field.
func (mu *MatchUpdate) SetLevel(m match.Level) *MatchUpdate {
	mu.mutation.SetLevel(m)
	return mu
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableLevel(m *match.Level) *MatchUpdate {
	if m != nil {
		mu.SetLevel(*m)
	}
	return mu
}

// SetParticipants sets the "participants" field.
func (mu *MatchUpdate) SetParticipants(i int) *MatchUpdate {
	mu.mutation.ResetParticipants()
	mu.mutation.SetParticipants(i)
	return mu
}

// SetNillableParticipants sets the "participants" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableParticipants(i *int) *MatchUpdate {
	if i != nil {
		mu.SetParticipants(*i)
	}
	return mu
}

// AddParticipants adds i to the "participants" field.
func (mu *MatchUpdate) AddParticipants(i int) *MatchUpdate {
	mu.mutation.AddParticipants(i)
	return mu
}

// SetFee sets the "fee" field.
func (mu *MatchUpdate) SetFee(i int) *MatchUpdate {
	mu.mutation.ResetFee()
	mu.mutation.SetFee(i)
	return mu
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableFee(i *int) *MatchUpdate {
	if i != nil {
		mu.SetFee(*i)
	}
	return mu
}

// AddFee adds i to the "fee" field.
func (mu *MatchUpdate) AddFee(i int) *MatchUpdate {
	mu.mutation.AddFee(i)
	return mu
}

// SetNotes sets the "notes" field.
func (mu *MatchUpdate) SetNotes(s string) *MatchUpdate {
	mu.mutation.SetNotes(s)
	return mu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableNotes(s *string) *MatchUpdate {
	if s != nil {
		mu.SetNotes(*s)
	}
	return mu
}

// SetCreatorID sets the "creator_id" field.
func (mu *MatchUpdate) SetCreatorID(u uuid.UUID) *MatchUpdate {
	mu.mutation.SetCreatorID(u)
	return mu
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableCreatorID(u *uuid.UUID) *MatchUpdate {
	if u != nil {
		mu.SetCreatorID(*u)
	}
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MatchUpdate) SetUpdatedAt(t time.Time) *MatchUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetIsApplied sets the "is_applied" field.
func (mu *MatchUpdate) SetIsApplied(b bool) *MatchUpdate {
	mu.mutation.SetIsApplied(b)
	return mu
}

// SetNillableIsApplied sets the "is_applied" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableIsApplied(b *bool) *MatchUpdate {
	if b != nil {
		mu.SetIsApplied(*b)
	}
	return mu
}

// SetCreator sets the "creator" edge to the User entity.
func (mu *MatchUpdate) SetCreator(u *User) *MatchUpdate {
	return mu.SetCreatorID(u.ID)
}

// AddMatchParticipationIDs adds the "match_participation" edge to the Participation entity by IDs.
func (mu *MatchUpdate) AddMatchParticipationIDs(ids ...uuid.UUID) *MatchUpdate {
	mu.mutation.AddMatchParticipationIDs(ids...)
	return mu
}

// AddMatchParticipation adds the "match_participation" edges to the Participation entity.
func (mu *MatchUpdate) AddMatchParticipation(p ...*Participation) *MatchUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.AddMatchParticipationIDs(ids...)
}

// Mutation returns the MatchMutation object of the builder.
func (mu *MatchUpdate) Mutation() *MatchMutation {
	return mu.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (mu *MatchUpdate) ClearCreator() *MatchUpdate {
	mu.mutation.ClearCreator()
	return mu
}

// ClearMatchParticipation clears all "match_participation" edges to the Participation entity.
func (mu *MatchUpdate) ClearMatchParticipation() *MatchUpdate {
	mu.mutation.ClearMatchParticipation()
	return mu
}

// RemoveMatchParticipationIDs removes the "match_participation" edge to Participation entities by IDs.
func (mu *MatchUpdate) RemoveMatchParticipationIDs(ids ...uuid.UUID) *MatchUpdate {
	mu.mutation.RemoveMatchParticipationIDs(ids...)
	return mu
}

// RemoveMatchParticipation removes "match_participation" edges to Participation entities.
func (mu *MatchUpdate) RemoveMatchParticipation(p ...*Participation) *MatchUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.RemoveMatchParticipationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MatchUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MatchUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MatchUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MatchUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MatchUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := match.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MatchUpdate) check() error {
	if v, ok := mu.mutation.Title(); ok {
		if err := match.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Match.title": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Location(); ok {
		if err := match.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Match.location": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Level(); ok {
		if err := match.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "Match.level": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Participants(); ok {
		if err := match.ParticipantsValidator(v); err != nil {
			return &ValidationError{Name: "participants", err: fmt.Errorf(`ent: validator failed for field "Match.participants": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Fee(); ok {
		if err := match.FeeValidator(v); err != nil {
			return &ValidationError{Name: "fee", err: fmt.Errorf(`ent: validator failed for field "Match.fee": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Notes(); ok {
		if err := match.NotesValidator(v); err != nil {
			return &ValidationError{Name: "notes", err: fmt.Errorf(`ent: validator failed for field "Match.notes": %w`, err)}
		}
	}
	if mu.mutation.CreatorCleared() && len(mu.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Match.creator"`)
	}
	return nil
}

func (mu *MatchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(match.Table, match.Columns, sqlgraph.NewFieldSpec(match.FieldID, field.TypeUUID))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Title(); ok {
		_spec.SetField(match.FieldTitle, field.TypeString, value)
	}
	if value, ok := mu.mutation.Date(); ok {
		_spec.SetField(match.FieldDate, field.TypeTime, value)
	}
	if value, ok := mu.mutation.Location(); ok {
		_spec.SetField(match.FieldLocation, field.TypeString, value)
	}
	if value, ok := mu.mutation.Level(); ok {
		_spec.SetField(match.FieldLevel, field.TypeEnum, value)
	}
	if value, ok := mu.mutation.Participants(); ok {
		_spec.SetField(match.FieldParticipants, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedParticipants(); ok {
		_spec.AddField(match.FieldParticipants, field.TypeInt, value)
	}
	if value, ok := mu.mutation.Fee(); ok {
		_spec.SetField(match.FieldFee, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedFee(); ok {
		_spec.AddField(match.FieldFee, field.TypeInt, value)
	}
	if value, ok := mu.mutation.Notes(); ok {
		_spec.SetField(match.FieldNotes, field.TypeString, value)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(match.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.IsApplied(); ok {
		_spec.SetField(match.FieldIsApplied, field.TypeBool, value)
	}
	if mu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.CreatorTable,
			Columns: []string{match.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.CreatorTable,
			Columns: []string{match.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MatchParticipationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.MatchParticipationTable,
			Columns: []string{match.MatchParticipationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(participation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMatchParticipationIDs(); len(nodes) > 0 && !mu.mutation.MatchParticipationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.MatchParticipationTable,
			Columns: []string{match.MatchParticipationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(participation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MatchParticipationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.MatchParticipationTable,
			Columns: []string{match.MatchParticipationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(participation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{match.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MatchUpdateOne is the builder for updating a single Match entity.
type MatchUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MatchMutation
}

// SetTitle sets the "title" field.
func (muo *MatchUpdateOne) SetTitle(s string) *MatchUpdateOne {
	muo.mutation.SetTitle(s)
	return muo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableTitle(s *string) *MatchUpdateOne {
	if s != nil {
		muo.SetTitle(*s)
	}
	return muo
}

// SetDate sets the "date" field.
func (muo *MatchUpdateOne) SetDate(t time.Time) *MatchUpdateOne {
	muo.mutation.SetDate(t)
	return muo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableDate(t *time.Time) *MatchUpdateOne {
	if t != nil {
		muo.SetDate(*t)
	}
	return muo
}

// SetLocation sets the "location" field.
func (muo *MatchUpdateOne) SetLocation(s string) *MatchUpdateOne {
	muo.mutation.SetLocation(s)
	return muo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableLocation(s *string) *MatchUpdateOne {
	if s != nil {
		muo.SetLocation(*s)
	}
	return muo
}

// SetLevel sets the "level" field.
func (muo *MatchUpdateOne) SetLevel(m match.Level) *MatchUpdateOne {
	muo.mutation.SetLevel(m)
	return muo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableLevel(m *match.Level) *MatchUpdateOne {
	if m != nil {
		muo.SetLevel(*m)
	}
	return muo
}

// SetParticipants sets the "participants" field.
func (muo *MatchUpdateOne) SetParticipants(i int) *MatchUpdateOne {
	muo.mutation.ResetParticipants()
	muo.mutation.SetParticipants(i)
	return muo
}

// SetNillableParticipants sets the "participants" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableParticipants(i *int) *MatchUpdateOne {
	if i != nil {
		muo.SetParticipants(*i)
	}
	return muo
}

// AddParticipants adds i to the "participants" field.
func (muo *MatchUpdateOne) AddParticipants(i int) *MatchUpdateOne {
	muo.mutation.AddParticipants(i)
	return muo
}

// SetFee sets the "fee" field.
func (muo *MatchUpdateOne) SetFee(i int) *MatchUpdateOne {
	muo.mutation.ResetFee()
	muo.mutation.SetFee(i)
	return muo
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableFee(i *int) *MatchUpdateOne {
	if i != nil {
		muo.SetFee(*i)
	}
	return muo
}

// AddFee adds i to the "fee" field.
func (muo *MatchUpdateOne) AddFee(i int) *MatchUpdateOne {
	muo.mutation.AddFee(i)
	return muo
}

// SetNotes sets the "notes" field.
func (muo *MatchUpdateOne) SetNotes(s string) *MatchUpdateOne {
	muo.mutation.SetNotes(s)
	return muo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableNotes(s *string) *MatchUpdateOne {
	if s != nil {
		muo.SetNotes(*s)
	}
	return muo
}

// SetCreatorID sets the "creator_id" field.
func (muo *MatchUpdateOne) SetCreatorID(u uuid.UUID) *MatchUpdateOne {
	muo.mutation.SetCreatorID(u)
	return muo
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableCreatorID(u *uuid.UUID) *MatchUpdateOne {
	if u != nil {
		muo.SetCreatorID(*u)
	}
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MatchUpdateOne) SetUpdatedAt(t time.Time) *MatchUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetIsApplied sets the "is_applied" field.
func (muo *MatchUpdateOne) SetIsApplied(b bool) *MatchUpdateOne {
	muo.mutation.SetIsApplied(b)
	return muo
}

// SetNillableIsApplied sets the "is_applied" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableIsApplied(b *bool) *MatchUpdateOne {
	if b != nil {
		muo.SetIsApplied(*b)
	}
	return muo
}

// SetCreator sets the "creator" edge to the User entity.
func (muo *MatchUpdateOne) SetCreator(u *User) *MatchUpdateOne {
	return muo.SetCreatorID(u.ID)
}

// AddMatchParticipationIDs adds the "match_participation" edge to the Participation entity by IDs.
func (muo *MatchUpdateOne) AddMatchParticipationIDs(ids ...uuid.UUID) *MatchUpdateOne {
	muo.mutation.AddMatchParticipationIDs(ids...)
	return muo
}

// AddMatchParticipation adds the "match_participation" edges to the Participation entity.
func (muo *MatchUpdateOne) AddMatchParticipation(p ...*Participation) *MatchUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.AddMatchParticipationIDs(ids...)
}

// Mutation returns the MatchMutation object of the builder.
func (muo *MatchUpdateOne) Mutation() *MatchMutation {
	return muo.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (muo *MatchUpdateOne) ClearCreator() *MatchUpdateOne {
	muo.mutation.ClearCreator()
	return muo
}

// ClearMatchParticipation clears all "match_participation" edges to the Participation entity.
func (muo *MatchUpdateOne) ClearMatchParticipation() *MatchUpdateOne {
	muo.mutation.ClearMatchParticipation()
	return muo
}

// RemoveMatchParticipationIDs removes the "match_participation" edge to Participation entities by IDs.
func (muo *MatchUpdateOne) RemoveMatchParticipationIDs(ids ...uuid.UUID) *MatchUpdateOne {
	muo.mutation.RemoveMatchParticipationIDs(ids...)
	return muo
}

// RemoveMatchParticipation removes "match_participation" edges to Participation entities.
func (muo *MatchUpdateOne) RemoveMatchParticipation(p ...*Participation) *MatchUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.RemoveMatchParticipationIDs(ids...)
}

// Where appends a list predicates to the MatchUpdate builder.
func (muo *MatchUpdateOne) Where(ps ...predicate.Match) *MatchUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MatchUpdateOne) Select(field string, fields ...string) *MatchUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Match entity.
func (muo *MatchUpdateOne) Save(ctx context.Context) (*Match, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MatchUpdateOne) SaveX(ctx context.Context) *Match {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MatchUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MatchUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MatchUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := match.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MatchUpdateOne) check() error {
	if v, ok := muo.mutation.Title(); ok {
		if err := match.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Match.title": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Location(); ok {
		if err := match.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Match.location": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Level(); ok {
		if err := match.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "Match.level": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Participants(); ok {
		if err := match.ParticipantsValidator(v); err != nil {
			return &ValidationError{Name: "participants", err: fmt.Errorf(`ent: validator failed for field "Match.participants": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Fee(); ok {
		if err := match.FeeValidator(v); err != nil {
			return &ValidationError{Name: "fee", err: fmt.Errorf(`ent: validator failed for field "Match.fee": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Notes(); ok {
		if err := match.NotesValidator(v); err != nil {
			return &ValidationError{Name: "notes", err: fmt.Errorf(`ent: validator failed for field "Match.notes": %w`, err)}
		}
	}
	if muo.mutation.CreatorCleared() && len(muo.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Match.creator"`)
	}
	return nil
}

func (muo *MatchUpdateOne) sqlSave(ctx context.Context) (_node *Match, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(match.Table, match.Columns, sqlgraph.NewFieldSpec(match.FieldID, field.TypeUUID))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Match.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, match.FieldID)
		for _, f := range fields {
			if !match.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != match.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Title(); ok {
		_spec.SetField(match.FieldTitle, field.TypeString, value)
	}
	if value, ok := muo.mutation.Date(); ok {
		_spec.SetField(match.FieldDate, field.TypeTime, value)
	}
	if value, ok := muo.mutation.Location(); ok {
		_spec.SetField(match.FieldLocation, field.TypeString, value)
	}
	if value, ok := muo.mutation.Level(); ok {
		_spec.SetField(match.FieldLevel, field.TypeEnum, value)
	}
	if value, ok := muo.mutation.Participants(); ok {
		_spec.SetField(match.FieldParticipants, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedParticipants(); ok {
		_spec.AddField(match.FieldParticipants, field.TypeInt, value)
	}
	if value, ok := muo.mutation.Fee(); ok {
		_spec.SetField(match.FieldFee, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedFee(); ok {
		_spec.AddField(match.FieldFee, field.TypeInt, value)
	}
	if value, ok := muo.mutation.Notes(); ok {
		_spec.SetField(match.FieldNotes, field.TypeString, value)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(match.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.IsApplied(); ok {
		_spec.SetField(match.FieldIsApplied, field.TypeBool, value)
	}
	if muo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.CreatorTable,
			Columns: []string{match.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.CreatorTable,
			Columns: []string{match.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MatchParticipationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.MatchParticipationTable,
			Columns: []string{match.MatchParticipationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(participation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMatchParticipationIDs(); len(nodes) > 0 && !muo.mutation.MatchParticipationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.MatchParticipationTable,
			Columns: []string{match.MatchParticipationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(participation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MatchParticipationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.MatchParticipationTable,
			Columns: []string{match.MatchParticipationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(participation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Match{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{match.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
