// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
	"github.com/horiyuko0512/soccer-community/ent/match"
	"github.com/horiyuko0512/soccer-community/ent/participation"
)

// CreateMatchInput represents a mutation input for creating matches.
type CreateMatchInput struct {
	Title                 string
	StartAt               time.Time
	EndAt                 time.Time
	Location              string
	Level                 match.Level
	Participants          int
	Fee                   int
	Notes                 string
	CreatedAt             *time.Time
	UpdatedAt             *time.Time
	IsApplied             *bool
	CreatorID             uuid.UUID
	MatchParticipationIDs []uuid.UUID
}

// Mutate applies the CreateMatchInput on the MatchMutation builder.
func (i *CreateMatchInput) Mutate(m *MatchMutation) {
	m.SetTitle(i.Title)
	m.SetStartAt(i.StartAt)
	m.SetEndAt(i.EndAt)
	m.SetLocation(i.Location)
	m.SetLevel(i.Level)
	m.SetParticipants(i.Participants)
	m.SetFee(i.Fee)
	m.SetNotes(i.Notes)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.IsApplied; v != nil {
		m.SetIsApplied(*v)
	}
	m.SetCreatorID(i.CreatorID)
	if v := i.MatchParticipationIDs; len(v) > 0 {
		m.AddMatchParticipationIDs(v...)
	}
}

// SetInput applies the change-set in the CreateMatchInput on the MatchCreate builder.
func (c *MatchCreate) SetInput(i CreateMatchInput) *MatchCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateMatchInput represents a mutation input for updating matches.
type UpdateMatchInput struct {
	Title                       *string
	StartAt                     *time.Time
	EndAt                       *time.Time
	Location                    *string
	Level                       *match.Level
	Participants                *int
	Fee                         *int
	Notes                       *string
	UpdatedAt                   *time.Time
	IsApplied                   *bool
	CreatorID                   *uuid.UUID
	ClearMatchParticipation     bool
	AddMatchParticipationIDs    []uuid.UUID
	RemoveMatchParticipationIDs []uuid.UUID
}

// Mutate applies the UpdateMatchInput on the MatchMutation builder.
func (i *UpdateMatchInput) Mutate(m *MatchMutation) {
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.StartAt; v != nil {
		m.SetStartAt(*v)
	}
	if v := i.EndAt; v != nil {
		m.SetEndAt(*v)
	}
	if v := i.Location; v != nil {
		m.SetLocation(*v)
	}
	if v := i.Level; v != nil {
		m.SetLevel(*v)
	}
	if v := i.Participants; v != nil {
		m.SetParticipants(*v)
	}
	if v := i.Fee; v != nil {
		m.SetFee(*v)
	}
	if v := i.Notes; v != nil {
		m.SetNotes(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.IsApplied; v != nil {
		m.SetIsApplied(*v)
	}
	if v := i.CreatorID; v != nil {
		m.SetCreatorID(*v)
	}
	if i.ClearMatchParticipation {
		m.ClearMatchParticipation()
	}
	if v := i.AddMatchParticipationIDs; len(v) > 0 {
		m.AddMatchParticipationIDs(v...)
	}
	if v := i.RemoveMatchParticipationIDs; len(v) > 0 {
		m.RemoveMatchParticipationIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateMatchInput on the MatchUpdate builder.
func (c *MatchUpdate) SetInput(i UpdateMatchInput) *MatchUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateMatchInput on the MatchUpdateOne builder.
func (c *MatchUpdateOne) SetInput(i UpdateMatchInput) *MatchUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateParticipationInput represents a mutation input for creating participations.
type CreateParticipationInput struct {
	Status    *participation.Status
	CreatedAt *time.Time
	UpdatedAt *time.Time
	UserID    uuid.UUID
	MatchID   uuid.UUID
}

// Mutate applies the CreateParticipationInput on the ParticipationMutation builder.
func (i *CreateParticipationInput) Mutate(m *ParticipationMutation) {
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetUserID(i.UserID)
	m.SetMatchID(i.MatchID)
}

// SetInput applies the change-set in the CreateParticipationInput on the ParticipationCreate builder.
func (c *ParticipationCreate) SetInput(i CreateParticipationInput) *ParticipationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateParticipationInput represents a mutation input for updating participations.
type UpdateParticipationInput struct {
	Status    *participation.Status
	UpdatedAt *time.Time
	UserID    *uuid.UUID
	MatchID   *uuid.UUID
}

// Mutate applies the UpdateParticipationInput on the ParticipationMutation builder.
func (i *UpdateParticipationInput) Mutate(m *ParticipationMutation) {
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if v := i.MatchID; v != nil {
		m.SetMatchID(*v)
	}
}

// SetInput applies the change-set in the UpdateParticipationInput on the ParticipationUpdate builder.
func (c *ParticipationUpdate) SetInput(i UpdateParticipationInput) *ParticipationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateParticipationInput on the ParticipationUpdateOne builder.
func (c *ParticipationUpdateOne) SetInput(i UpdateParticipationInput) *ParticipationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	NickName             string
	Email                string
	PasswordHash         string
	Introduction         string
	CreatedAt            *time.Time
	UpdatedAt            *time.Time
	RefreshToken         *string
	MatchIDs             []uuid.UUID
	UserParticipationIDs []uuid.UUID
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetNickName(i.NickName)
	m.SetEmail(i.Email)
	m.SetPasswordHash(i.PasswordHash)
	m.SetIntroduction(i.Introduction)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.RefreshToken; v != nil {
		m.SetRefreshToken(*v)
	}
	if v := i.MatchIDs; len(v) > 0 {
		m.AddMatchIDs(v...)
	}
	if v := i.UserParticipationIDs; len(v) > 0 {
		m.AddUserParticipationIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	NickName                   *string
	Email                      *string
	PasswordHash               *string
	Introduction               *string
	UpdatedAt                  *time.Time
	ClearRefreshToken          bool
	RefreshToken               *string
	ClearMatches               bool
	AddMatchIDs                []uuid.UUID
	RemoveMatchIDs             []uuid.UUID
	ClearUserParticipation     bool
	AddUserParticipationIDs    []uuid.UUID
	RemoveUserParticipationIDs []uuid.UUID
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.NickName; v != nil {
		m.SetNickName(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.PasswordHash; v != nil {
		m.SetPasswordHash(*v)
	}
	if v := i.Introduction; v != nil {
		m.SetIntroduction(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearRefreshToken {
		m.ClearRefreshToken()
	}
	if v := i.RefreshToken; v != nil {
		m.SetRefreshToken(*v)
	}
	if i.ClearMatches {
		m.ClearMatches()
	}
	if v := i.AddMatchIDs; len(v) > 0 {
		m.AddMatchIDs(v...)
	}
	if v := i.RemoveMatchIDs; len(v) > 0 {
		m.RemoveMatchIDs(v...)
	}
	if i.ClearUserParticipation {
		m.ClearUserParticipation()
	}
	if v := i.AddUserParticipationIDs; len(v) > 0 {
		m.AddUserParticipationIDs(v...)
	}
	if v := i.RemoveUserParticipationIDs; len(v) > 0 {
		m.RemoveUserParticipationIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
