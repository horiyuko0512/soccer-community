// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNickName holds the string denoting the nickname field in the database.
	FieldNickName = "nick_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPasswordHash holds the string denoting the password_hash field in the database.
	FieldPasswordHash = "password_hash"
	// FieldIntroduction holds the string denoting the introduction field in the database.
	FieldIntroduction = "introduction"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldRefreshToken holds the string denoting the refresh_token field in the database.
	FieldRefreshToken = "refresh_token"
	// EdgeMatches holds the string denoting the matches edge name in mutations.
	EdgeMatches = "matches"
	// EdgeUserParticipation holds the string denoting the user_participation edge name in mutations.
	EdgeUserParticipation = "user_participation"
	// Table holds the table name of the user in the database.
	Table = "users"
	// MatchesTable is the table that holds the matches relation/edge.
	MatchesTable = "matches"
	// MatchesInverseTable is the table name for the Match entity.
	// It exists in this package in order to avoid circular dependency with the "match" package.
	MatchesInverseTable = "matches"
	// MatchesColumn is the table column denoting the matches relation/edge.
	MatchesColumn = "creator_id"
	// UserParticipationTable is the table that holds the user_participation relation/edge.
	UserParticipationTable = "participations"
	// UserParticipationInverseTable is the table name for the Participation entity.
	// It exists in this package in order to avoid circular dependency with the "participation" package.
	UserParticipationInverseTable = "participations"
	// UserParticipationColumn is the table column denoting the user_participation relation/edge.
	UserParticipationColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldNickName,
	FieldEmail,
	FieldPasswordHash,
	FieldIntroduction,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldRefreshToken,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NickNameValidator is a validator for the "nickName" field. It is called by the builders before save.
	NickNameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordHashValidator is a validator for the "password_hash" field. It is called by the builders before save.
	PasswordHashValidator func(string) error
	// IntroductionValidator is a validator for the "introduction" field. It is called by the builders before save.
	IntroductionValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNickName orders the results by the nickName field.
func ByNickName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNickName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPasswordHash orders the results by the password_hash field.
func ByPasswordHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordHash, opts...).ToFunc()
}

// ByIntroduction orders the results by the introduction field.
func ByIntroduction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIntroduction, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByRefreshToken orders the results by the refresh_token field.
func ByRefreshToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefreshToken, opts...).ToFunc()
}

// ByMatchesCount orders the results by matches count.
func ByMatchesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMatchesStep(), opts...)
	}
}

// ByMatches orders the results by matches terms.
func ByMatches(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMatchesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserParticipationCount orders the results by user_participation count.
func ByUserParticipationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserParticipationStep(), opts...)
	}
}

// ByUserParticipation orders the results by user_participation terms.
func ByUserParticipation(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserParticipationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMatchesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MatchesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MatchesTable, MatchesColumn),
	)
}
func newUserParticipationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserParticipationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserParticipationTable, UserParticipationColumn),
	)
}
