// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/horiyuko0512/soccer-community/ent/match"
	"github.com/horiyuko0512/soccer-community/ent/participation"
	"github.com/horiyuko0512/soccer-community/ent/predicate"
	"github.com/horiyuko0512/soccer-community/ent/user"
)

// ParticipationUpdate is the builder for updating Participation entities.
type ParticipationUpdate struct {
	config
	hooks    []Hook
	mutation *ParticipationMutation
}

// Where appends a list predicates to the ParticipationUpdate builder.
func (pu *ParticipationUpdate) Where(ps ...predicate.Participation) *ParticipationUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUserID sets the "user_id" field.
func (pu *ParticipationUpdate) SetUserID(u uuid.UUID) *ParticipationUpdate {
	pu.mutation.SetUserID(u)
	return pu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pu *ParticipationUpdate) SetNillableUserID(u *uuid.UUID) *ParticipationUpdate {
	if u != nil {
		pu.SetUserID(*u)
	}
	return pu
}

// SetMatchID sets the "match_id" field.
func (pu *ParticipationUpdate) SetMatchID(u uuid.UUID) *ParticipationUpdate {
	pu.mutation.SetMatchID(u)
	return pu
}

// SetNillableMatchID sets the "match_id" field if the given value is not nil.
func (pu *ParticipationUpdate) SetNillableMatchID(u *uuid.UUID) *ParticipationUpdate {
	if u != nil {
		pu.SetMatchID(*u)
	}
	return pu
}

// SetStatus sets the "status" field.
func (pu *ParticipationUpdate) SetStatus(pa participation.Status) *ParticipationUpdate {
	pu.mutation.SetStatus(pa)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *ParticipationUpdate) SetNillableStatus(pa *participation.Status) *ParticipationUpdate {
	if pa != nil {
		pu.SetStatus(*pa)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ParticipationUpdate) SetUpdatedAt(t time.Time) *ParticipationUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetUser sets the "user" edge to the User entity.
func (pu *ParticipationUpdate) SetUser(u *User) *ParticipationUpdate {
	return pu.SetUserID(u.ID)
}

// SetMatch sets the "match" edge to the Match entity.
func (pu *ParticipationUpdate) SetMatch(m *Match) *ParticipationUpdate {
	return pu.SetMatchID(m.ID)
}

// Mutation returns the ParticipationMutation object of the builder.
func (pu *ParticipationUpdate) Mutation() *ParticipationMutation {
	return pu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pu *ParticipationUpdate) ClearUser() *ParticipationUpdate {
	pu.mutation.ClearUser()
	return pu
}

// ClearMatch clears the "match" edge to the Match entity.
func (pu *ParticipationUpdate) ClearMatch() *ParticipationUpdate {
	pu.mutation.ClearMatch()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ParticipationUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ParticipationUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ParticipationUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ParticipationUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ParticipationUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := participation.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ParticipationUpdate) check() error {
	if v, ok := pu.mutation.Status(); ok {
		if err := participation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Participation.status": %w`, err)}
		}
	}
	if pu.mutation.UserCleared() && len(pu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Participation.user"`)
	}
	if pu.mutation.MatchCleared() && len(pu.mutation.MatchIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Participation.match"`)
	}
	return nil
}

func (pu *ParticipationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(participation.Table, participation.Columns, sqlgraph.NewFieldSpec(participation.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(participation.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(participation.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   participation.UserTable,
			Columns: []string{participation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   participation.UserTable,
			Columns: []string{participation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.MatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   participation.MatchTable,
			Columns: []string{participation.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   participation.MatchTable,
			Columns: []string{participation.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{participation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ParticipationUpdateOne is the builder for updating a single Participation entity.
type ParticipationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ParticipationMutation
}

// SetUserID sets the "user_id" field.
func (puo *ParticipationUpdateOne) SetUserID(u uuid.UUID) *ParticipationUpdateOne {
	puo.mutation.SetUserID(u)
	return puo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (puo *ParticipationUpdateOne) SetNillableUserID(u *uuid.UUID) *ParticipationUpdateOne {
	if u != nil {
		puo.SetUserID(*u)
	}
	return puo
}

// SetMatchID sets the "match_id" field.
func (puo *ParticipationUpdateOne) SetMatchID(u uuid.UUID) *ParticipationUpdateOne {
	puo.mutation.SetMatchID(u)
	return puo
}

// SetNillableMatchID sets the "match_id" field if the given value is not nil.
func (puo *ParticipationUpdateOne) SetNillableMatchID(u *uuid.UUID) *ParticipationUpdateOne {
	if u != nil {
		puo.SetMatchID(*u)
	}
	return puo
}

// SetStatus sets the "status" field.
func (puo *ParticipationUpdateOne) SetStatus(pa participation.Status) *ParticipationUpdateOne {
	puo.mutation.SetStatus(pa)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *ParticipationUpdateOne) SetNillableStatus(pa *participation.Status) *ParticipationUpdateOne {
	if pa != nil {
		puo.SetStatus(*pa)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ParticipationUpdateOne) SetUpdatedAt(t time.Time) *ParticipationUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetUser sets the "user" edge to the User entity.
func (puo *ParticipationUpdateOne) SetUser(u *User) *ParticipationUpdateOne {
	return puo.SetUserID(u.ID)
}

// SetMatch sets the "match" edge to the Match entity.
func (puo *ParticipationUpdateOne) SetMatch(m *Match) *ParticipationUpdateOne {
	return puo.SetMatchID(m.ID)
}

// Mutation returns the ParticipationMutation object of the builder.
func (puo *ParticipationUpdateOne) Mutation() *ParticipationMutation {
	return puo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (puo *ParticipationUpdateOne) ClearUser() *ParticipationUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// ClearMatch clears the "match" edge to the Match entity.
func (puo *ParticipationUpdateOne) ClearMatch() *ParticipationUpdateOne {
	puo.mutation.ClearMatch()
	return puo
}

// Where appends a list predicates to the ParticipationUpdate builder.
func (puo *ParticipationUpdateOne) Where(ps ...predicate.Participation) *ParticipationUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ParticipationUpdateOne) Select(field string, fields ...string) *ParticipationUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Participation entity.
func (puo *ParticipationUpdateOne) Save(ctx context.Context) (*Participation, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ParticipationUpdateOne) SaveX(ctx context.Context) *Participation {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ParticipationUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ParticipationUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ParticipationUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := participation.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ParticipationUpdateOne) check() error {
	if v, ok := puo.mutation.Status(); ok {
		if err := participation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Participation.status": %w`, err)}
		}
	}
	if puo.mutation.UserCleared() && len(puo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Participation.user"`)
	}
	if puo.mutation.MatchCleared() && len(puo.mutation.MatchIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Participation.match"`)
	}
	return nil
}

func (puo *ParticipationUpdateOne) sqlSave(ctx context.Context) (_node *Participation, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(participation.Table, participation.Columns, sqlgraph.NewFieldSpec(participation.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Participation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, participation.FieldID)
		for _, f := range fields {
			if !participation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != participation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(participation.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(participation.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   participation.UserTable,
			Columns: []string{participation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   participation.UserTable,
			Columns: []string{participation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.MatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   participation.MatchTable,
			Columns: []string{participation.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   participation.MatchTable,
			Columns: []string{participation.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Participation{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{participation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
